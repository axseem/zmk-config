#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 28>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
        };

        redo {
            bindings = <&kp LS(LC(Z))>;
            key-positions = <25 27>;
        };

        lh-gui {
            bindings = <&kp LCTRL>;
            key-positions = <15 16>;
        };

        lh-alt {
            bindings = <&kp LGUI>;
            key-positions = <14 15>;
        };

        lh-ctrl {
            bindings = <&kp LALT>;
            key-positions = <13 14>;
        };

        rh-gui {
            bindings = <&kp LCTRL>;
            key-positions = <19 20>;
        };

        rh-alt {
            bindings = <&kp LGUI>;
            key-positions = <20 21>;
        };

        rh-ctrl {
            bindings = <&kp LALT>;
            key-positions = <21 22>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <3 4>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 10>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <33 34>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <7 19>;
        };

        astrk {
            bindings = <&kp ASTRK>;
            key-positions = <8 20>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <9 21>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <14 26>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <15 27>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 28>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <20 32>;
        };

        excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <21 33>;
        };

        lpar_lt {
            bindings = <&kp LPAR>;
            key-positions = <7 8>;
        };

        rpar_gt {
            bindings = <&kp RPAR>;
            key-positions = <8 9>;
        };

        lbkt {
            bindings = <&kp LBKT>;
            key-positions = <31 32>;
        };

        rbkt {
            bindings = <&kp RBKT>;
            key-positions = <32 33>;
        };

        bt3 {
            bindings = <&bt3>;
            key-positions = <17 29>;
            layers = <2>;
        };

        bt4 {
            bindings = <&bt4>;
            key-positions = <5 17>;
            layers = <2>;
        };
    };

    macros {
        bt0_clr: bt0_clr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT0_CLR";
        };

        bt1_clr: bt1_clr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT1_CLR";
        };

        bt2_clr: bt2_clr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT2_CLR";
        };

        bt3_clr: bt3_clr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
            label = "BT3_CLR";
        };

        bt4_clr: bt4_clr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
            label = "BT4_CLR";
        };
    };

    behaviors {
        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT0";
            bindings = <&bt BT_SEL 0>, <&bt0_clr>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT1";
            bindings = <&bt BT_SEL 1>, <&bt1_clr>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT2";
            bindings = <&bt BT_SEL 2>, <&bt2_clr>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt3: bt3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT3";
            bindings = <&bt BT_SEL 3>, <&bt3_clr>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt4: bt4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT4";
            bindings = <&bt BT_SEL 4>, <&bt4_clr>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&trans  &kp B  &kp L  &kp D      &kp C      &kp V     &kp J   &kp F  &kp O      &kp U    &kp SEMI  &trans
&trans  &kp N  &kp R  &kp T      &kp S      &kp G     &kp Y   &kp H  &kp A      &kp E    &kp I     &trans
&trans  &kp X  &kp Q  &kp M      &kp W      &kp Z     &kp K   &kp P  &kp COMMA  &kp DOT  &kp SQT   &trans
                      &kp LSHFT  &kp SPACE  &trans    &trans  &mo 1  &mo 2
            >;
        };

        num {
            bindings = <
&trans  &none   &kp N7  &kp N8  &kp N9  &none     &none   &kp C_PP    &kp C_PREV    &kp C_NEXT    &kp C_BRI_UP  &trans
&trans  &kp N0  &kp N4  &kp N5  &kp N6  &none     &none   &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT     &trans
&trans  &none   &kp N1  &kp N2  &kp N3  &none     &none   &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_DN  &trans
                        &trans  &trans  &trans    &trans  &trans      &trans
            >;
        };

        fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &bt2      &none   &kp GLOBE  &kp CAPS   &kp INS    &kp PSCRN  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &bt1      &none   &sk LCTRL  &sk LGUI   &sk LALT   &sk LSHFT  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &bt0      &none   &kp HOME   &kp PG_UP  &kp PG_DN  &kp END    &trans
                         &trans  &trans  &trans    &trans  &trans     &trans
            >;
        };
    };
};
