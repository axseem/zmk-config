#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <13 2>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 26>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <25 26 27>;
        };

        lh-gui {
            bindings = <&kp LGUI>;
            key-positions = <16 15>;
        };

        lh-alt {
            bindings = <&kp LALT>;
            key-positions = <16 14>;
        };

        lh-ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <16 13>;
        };

        lh-gui-alt {
            bindings = <&kp LG(LALT)>;
            key-positions = <16 15 14>;
        };

        lh-gui-ctrl {
            bindings = <&kp LG(LCTRL)>;
            key-positions = <16 15 13>;
        };

        lh-alt-ctrl {
            bindings = <&kp LA(LCTRL)>;
            key-positions = <16 14 13>;
        };

        lh-gui-alt-ctrl {
            bindings = <&kp LG(LA(LCTRL))>;
            key-positions = <16 15 14 13>;
        };

        rh-gui {
            bindings = <&kp LGUI>;
            key-positions = <19 20>;
        };

        rh-alt {
            bindings = <&kp LALT>;
            key-positions = <19 21>;
        };

        rh-ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <19 22>;
        };

        rh-gui-alt {
            bindings = <&kp LG(LALT)>;
            key-positions = <19 20 21>;
        };

        rh-gui-ctrl {
            bindings = <&kp LG(LCTRL)>;
            key-positions = <19 20 22>;
        };

        rh-alt-ctrl {
            bindings = <&kp LA(LCTRL)>;
            key-positions = <19 21 22>;
        };

        rh-gui-alt-ctrl {
            bindings = <&kp LG(LA(LCTRL))>;
            key-positions = <19 20 21 22>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <3 4>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <7 19>;
        };

        astrk {
            bindings = <&kp ASTRK>;
            key-positions = <8 20>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <9 21>;
        };

        sqt {
            bindings = <&kp SQT>;
            key-positions = <14 26>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <15 27>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 28>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <17 29>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <18 30>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
        };

        excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <20 32>;
        };

        pipe {
            bindings = <&kp SLASH>;
            key-positions = <21 33>;
        };

        lpar_lt {
            bindings = <&lpar_lt>;
            key-positions = <7 8>;
        };

        rpar_gt {
            bindings = <&rpar_gt>;
            key-positions = <8 9>;
        };

        lbkt {
            bindings = <&kp LBKT>;
            key-positions = <31 32>;
        };

        rbkt {
            bindings = <&kp RBKT>;
            key-positions = <32 33>;
        };
    };

    macros {
        bt0_clr: bt0_clr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT0_CLR";
        };

        bt1_clr: bt1_clr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT1_CLR";
        };

        bt2_clr: bt2_clr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT2_CLR";
        };
    };

    behaviors {
        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT0";
            bindings = <&bt BT_SEL 0>, <&bt0_clr>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT1";
            bindings = <&bt BT_SEL 1>, <&bt1_clr>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT2";
            bindings = <&bt BT_SEL 2>, <&bt2_clr>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none  &kp B  &kp L  &kp D    &kp C      &kp V        &kp J  &kp F  &kp O          &kp U    &kp SEMI  &none
&none  &kp N  &kp R  &kp T    &kp S      &kp G        &kp Y  &kp H  &kp A          &kp E    &kp I     &none
&none  &kp X  &kp Q  &kp M    &kp W      &kp Z        &kp K  &kp P  &kp COMMA      &kp DOT  &kp SQT   &none
                     &kp TAB  &kp SPACE  &kp LSHFT    &mo 2  &mo 1  &kp BACKSPACE
            >;
        };

        num {
            bindings = <
&none  &kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT     &kp INS       &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none
&none  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp EQUAL    &kp CAPSLOCK  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none
&none  &kp N0     &kp N1  &kp N2  &kp N3  &kp BSLH     &none         &none     &none      &none      &none      &none
                          &trans  &trans  &trans       &trans        &trans    &trans
            >;
        };

        fun {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &bt0      &none   &kp C_BRI_DN  &kp C_PLAY_PAUSE   &kp C_MUTE       &kp C_BRI_UP  &none
&none  &kp F11  &kp F4  &kp F5  &kp F6  &bt1      &none   &kp C_PREV    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &none
&none  &kp F10  &kp F1  &kp F2  &kp F3  &bt2      &none   &none         &none              &none            &none         &none
                        &trans  &trans  &trans    &trans  &trans        &trans
            >;
        };
    };
};
